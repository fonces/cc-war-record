import{E as e,F as t,I as n,L as r,P as i,Y as a,_t as o,j as s,mt as c}from"./index-BBYhvlPi.js";var l=e=>{let t,n=new Set,r=(e,r)=>{let i=typeof e==`function`?e(t):e;if(!Object.is(i,t)){let e=t;t=r??(typeof i!=`object`||!i)?i:Object.assign({},t,i),n.forEach(n=>n(t,e))}},i=()=>t,a={setState:r,getState:i,getInitialState:()=>o,subscribe:e=>(n.add(e),()=>n.delete(e))},o=t=e(r,i,a);return a},u=(e=>e?l(e):l),d=o(c(),1),f=e=>e;function p(e,t=f){let n=d.useSyncExternalStore(e.subscribe,d.useCallback(()=>t(e.getState()),[e,t]),d.useCallback(()=>t(e.getInitialState()),[e,t]));return d.useDebugValue(n),n}var m=e=>{let t=u(e),n=e=>p(t,e);return Object.assign(n,t),n},h=(e=>e?m(e):m);const g=h((n,o)=>({characters:[],matchRecords:[],isLoading:!1,error:null,loadData:()=>{n({isLoading:!0,error:null});try{let e=t(i.CHARACTERS,[]),r=t(i.MATCH_RECORDS,[]);n({characters:e,matchRecords:r,isLoading:!1})}catch(t){n({isLoading:!1,error:t instanceof Error?t.message:e.t(`character.errors.loadFailed`)})}},createCharacter:t=>{let{characters:c}=o();if(c.find(e=>e.name===t.name)){let r=e.t(`character.errors.alreadyExists`,{name:t.name});throw n({error:r}),Error(r)}let l=a(),u={uuid:s(),name:t.name,createdAt:l,updatedAt:l},d=[...c,u];return r(i.CHARACTERS,d),n({characters:d,error:null}),u},updateCharacter:(t,s)=>{let{characters:c}=o();if(!c.find(e=>e.uuid===t))return n({error:e.t(`character.errors.notFound`)}),!1;if(c.find(e=>e.name===s.trim()&&e.uuid!==t))return n({error:e.t(`character.errors.alreadyExists`,{name:s.trim()})}),!1;let l=a(),u=c.map(e=>e.uuid===t?{...e,name:s.trim(),updatedAt:l}:e);return r(i.CHARACTERS,u),n({characters:u,error:null}),!0},deleteCharacter:t=>{let{characters:a,matchRecords:s}=o();if(!a.find(e=>e.uuid===t))return n({error:e.t(`character.errors.notFound`)}),!1;let c=a.filter(e=>e.uuid!==t),l=s.filter(e=>e.characterUuid!==t);return r(i.CHARACTERS,c),r(i.MATCH_RECORDS,l),n({characters:c,matchRecords:l,error:null}),!0},createMatchRecord:e=>{let{matchRecords:t}=o(),c=a(),l={uuid:s(),characterUuid:e.characterUuid,seasonUuid:e.seasonUuid,job:e.job,map:e.map,isWin:e.isWin,recordedAt:c,createdAt:c,updatedAt:c},u=[...t,l];return r(i.MATCH_RECORDS,u),n({matchRecords:u,error:null}),l},deleteMatchRecord:t=>{let{matchRecords:a}=o();if(!a.find(e=>e.uuid===t))return n({error:e.t(`character.errors.matchRecordNotFound`)}),!1;let s=a.filter(e=>e.uuid!==t);return r(i.MATCH_RECORDS,s),n({matchRecords:s,error:null}),!0},clearMatchRecords:()=>{r(i.MATCH_RECORDS,[]),n({matchRecords:[],error:null})},getCharacterStatsForSeason:e=>{let{characters:t,matchRecords:n}=o(),r=_.getState().getHistoryByUuid(e);return t.map(t=>{let i=[...n.filter(n=>n.characterUuid===t.uuid&&n.seasonUuid===e)].sort((e,t)=>new Date(t.recordedAt).getTime()-new Date(e.recordedAt).getTime()),a=r?.characterStats.find(e=>e.character.uuid===t.uuid)?.usedJobs||[];return{character:t,usedJobs:a,recentMatches:i}}).sort((e,t)=>new Date(t.character.createdAt).getTime()-new Date(e.character.createdAt).getTime())},getMatchRecordsForCharacter:(e,t)=>{let{matchRecords:n}=o();return n.filter(n=>!(n.characterUuid!==e||t&&n.seasonUuid!==t)).sort((e,t)=>new Date(t.recordedAt).getTime()-new Date(e.recordedAt).getTime())},clearError:()=>{n({error:null})}}));typeof window<`u`&&g.getState().loadData();const _=h((o,c)=>({histories:[],isLoading:!1,error:null,loadHistories:()=>{o({isLoading:!0,error:null});try{let e=t(i.HISTORIES,[]);o({histories:e,isLoading:!1})}catch(t){o({isLoading:!1,error:t instanceof Error?t.message:e.t(`pages.histories.errors.loadFailed`)})}},createHistory:t=>{let{histories:n}=c();if(n.find(e=>e.seasonName===t.seasonName)){let n=e.t(`pages.histories.errors.alreadyExists`,{seasonName:t.seasonName});throw o({error:n}),Error(n)}let l=a(),u={uuid:s(),seasonName:t.seasonName,createdAt:l,updatedAt:l,characterStats:[]};if(n.length>0){let e=n.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime())[0],t=g.getState().getCharacterStatsForSeason(e.uuid),i=[];t.forEach(e=>{i.push(...e.recentMatches)}),i.length>0&&(r(`histories-${e.uuid}`,i),g.getState().clearMatchRecords())}let d=[...n,u];return r(i.HISTORIES,d),o({histories:d,error:null}),u},updateHistory:(t,n)=>{let{histories:s}=c(),l=s.findIndex(e=>e.uuid===t);if(l===-1)return o({error:e.t(`pages.histories.errors.notFound`)}),!1;if(n.seasonName&&s.find(e=>e.uuid!==t&&e.seasonName===n.seasonName))return o({error:e.t(`pages.histories.errors.alreadyExists`,{seasonName:n.seasonName})}),!1;let u={...s[l],...n,updatedAt:a()},d=[...s];return d[l]=u,r(i.HISTORIES,d),o({histories:d,error:null}),!0},deleteHistory:t=>{let{histories:a}=c();if(a.findIndex(e=>e.uuid===t)===-1)return o({error:e.t(`pages.histories.errors.notFound`)}),!1;try{n(`histories-${t}`)}catch(n){return console.error(e.t(`pages.histories.errors.deleteMatchRecordsFailed`,{uuid:t}),n),!1}let s=a.filter(e=>e.uuid!==t);return r(i.HISTORIES,s),o({histories:s,error:null}),!0},getHistoryByUuid:e=>{let{histories:t}=c();return t.find(t=>t.uuid===e)},getSortedHistories:()=>{let{histories:e}=c();return[...e].sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime())},addCharacterStats:(t,n)=>{let{histories:s}=c(),l=s.findIndex(e=>e.uuid===t);if(l===-1)return o({error:e.t(`pages.histories.errors.notFound`)}),null;let u=s[l],d=u.characterStats.find(e=>e.character.uuid===n.uuid);if(d)return d;let f={character:n,usedJobs:[],recentMatches:[]},p={...u,characterStats:[...u.characterStats,f],updatedAt:a()},m=[...s];return m[l]=p,r(i.HISTORIES,m),o({histories:m,error:null}),f},addUsedJob:t=>{let{histories:n}=c(),s=n.findIndex(e=>e.uuid===t.seasonUuid);if(s===-1)return o({error:e.t(`pages.histories.errors.notFound`)}),!1;let l=n[s],u=l.characterStats.findIndex(e=>e.character.uuid===t.characterUuid);if(u===-1)return o({error:e.t(`pages.histories.errors.characterNotFound`)}),!1;let d=l.characterStats[u];if(d.usedJobs.includes(t.job))return!0;let f={...d,usedJobs:[...d.usedJobs,t.job]},p=[...l.characterStats];p[u]=f;let m={...l,characterStats:p,updatedAt:a()},h=[...n];return h[s]=m,r(i.HISTORIES,h),o({histories:h,error:null}),!0},getMatchRecordsForSeason:n=>{try{return t(`histories-${n}`,[])}catch(t){return console.error(e.t(`pages.histories.errors.loadMatchRecordsFailed`,{seasonUuid:n}),t),[]}},clearError:()=>{o({error:null})}}));typeof window<`u`&&_.getState().loadHistories();export{g as n,_ as t};