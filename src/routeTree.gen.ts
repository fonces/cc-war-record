/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NewRouteImport } from './routes/new'
import { Route as GraphsRouteImport } from './routes/graphs'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HistoriesIndexRouteImport } from './routes/histories/index'
import { Route as HistoriesCurrentRouteImport } from './routes/histories/current'
import { Route as HistoriesIdRouteImport } from './routes/histories/$id'

const NewRoute = NewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRouteImport,
} as any)
const GraphsRoute = GraphsRouteImport.update({
  id: '/graphs',
  path: '/graphs',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoriesIndexRoute = HistoriesIndexRouteImport.update({
  id: '/histories/',
  path: '/histories/',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoriesCurrentRoute = HistoriesCurrentRouteImport.update({
  id: '/histories/current',
  path: '/histories/current',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoriesIdRoute = HistoriesIdRouteImport.update({
  id: '/histories/$id',
  path: '/histories/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/graphs': typeof GraphsRoute
  '/new': typeof NewRoute
  '/histories/$id': typeof HistoriesIdRoute
  '/histories/current': typeof HistoriesCurrentRoute
  '/histories': typeof HistoriesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/graphs': typeof GraphsRoute
  '/new': typeof NewRoute
  '/histories/$id': typeof HistoriesIdRoute
  '/histories/current': typeof HistoriesCurrentRoute
  '/histories': typeof HistoriesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/graphs': typeof GraphsRoute
  '/new': typeof NewRoute
  '/histories/$id': typeof HistoriesIdRoute
  '/histories/current': typeof HistoriesCurrentRoute
  '/histories/': typeof HistoriesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/faq'
    | '/graphs'
    | '/new'
    | '/histories/$id'
    | '/histories/current'
    | '/histories'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/faq'
    | '/graphs'
    | '/new'
    | '/histories/$id'
    | '/histories/current'
    | '/histories'
  id:
    | '__root__'
    | '/'
    | '/faq'
    | '/graphs'
    | '/new'
    | '/histories/$id'
    | '/histories/current'
    | '/histories/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FaqRoute: typeof FaqRoute
  GraphsRoute: typeof GraphsRoute
  NewRoute: typeof NewRoute
  HistoriesIdRoute: typeof HistoriesIdRoute
  HistoriesCurrentRoute: typeof HistoriesCurrentRoute
  HistoriesIndexRoute: typeof HistoriesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/graphs': {
      id: '/graphs'
      path: '/graphs'
      fullPath: '/graphs'
      preLoaderRoute: typeof GraphsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/histories/': {
      id: '/histories/'
      path: '/histories'
      fullPath: '/histories'
      preLoaderRoute: typeof HistoriesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/histories/current': {
      id: '/histories/current'
      path: '/histories/current'
      fullPath: '/histories/current'
      preLoaderRoute: typeof HistoriesCurrentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/histories/$id': {
      id: '/histories/$id'
      path: '/histories/$id'
      fullPath: '/histories/$id'
      preLoaderRoute: typeof HistoriesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FaqRoute: FaqRoute,
  GraphsRoute: GraphsRoute,
  NewRoute: NewRoute,
  HistoriesIdRoute: HistoriesIdRoute,
  HistoriesCurrentRoute: HistoriesCurrentRoute,
  HistoriesIndexRoute: HistoriesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
